package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import util.ConnectionUtil;
import vo.BoardVO;
import vo.BuyVO;
import vo.ItemVO;
import vo.UserVO;

public class AdminOnlyDAO {

	// 모든 상품을 가져옵니다.
	public ArrayList<ItemVO> getAllProduct() throws SQLException{
		final String sql = "select m.ITEM_NO, m.ITEM_CATEGORY_NO, m.ITEM_NAME, m.ITEM_PRICE, m.ITEM_COUNT, m.ITEM_COLOR, m.ITEM_GROUP_NO, m.ITEM_SRC, m.ITEM_SIZE, m.ITEM_VIEWSRC, m.ITEM_ETC from MALL_ITEM m order BY m.ITEM_NO ";
		
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);

		ArrayList<ItemVO> itemList = new ArrayList<>();
		
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			ItemVO item = new ItemVO();
			item.setName(rs.getString("ITEM_NAME"));
			item.setViewSrc(rs.getString("ITEM_VIEWSRC"));
			item.setItemNo(rs.getInt("ITEM_NO"));
			item.setSrc(rs.getString("ITEM_SRC"));
			item.setCount(rs.getInt("ITEM_COUNT"));
			item.setPrice(rs.getInt("ITEM_PRICE"));
			item.setColor(rs.getString("ITEM_COLOR"));
			item.setSize(rs.getString("ITEM_SIZE"));
			item.setGroupNo(rs.getInt("ITEM_GROUP_NO"));
			item.setEtc(rs.getString("ITEM_ETC"));
			item.setCategoryNo(rs.getInt("ITEM_CATEGORY_NO"));
			
			itemList.add(item);
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return itemList;
	}
	
	// 모든 유저 정보 가져오기
	public ArrayList<UserVO> getAllUser() throws SQLException {
		final String sql = " select m.USER_NO, m.USER_ID, m.USER_PWD, m.USER_ADDRESS, m.USER_BIRTHDAY, m.USER_GRADE, m.USER_NAME, m.USER_PHONE, m.USER_POINT, m.USER_REGDATE, m.USER_TOTAL_POINT from MALL_USER m order BY m.USER_NO DESC ";
		
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);

		ArrayList<UserVO> userList = new ArrayList<>();
		
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			UserVO user = new UserVO();
			user.setId(rs.getString("USER_ID"));
			user.setName(rs.getString("USER_NAME"));
			user.setNo(rs.getInt("USER_NO"));
			user.setPw(rs.getString("USER_PWD"));
			user.setPhone(rs.getString("USER_PHONE"));
			user.setAddr(rs.getString("USER_ADDRESS"));
			user.setGrade(rs.getString("USER_GRADE"));
			user.setTotalPoint(rs.getInt("USER_TOTAL_POINT"));
			user.setPoint(rs.getInt("USER_POINT"));
			user.setRegdate(rs.getDate("USER_REGDATE"));
			user.setBirth(rs.getString("USER_BIRTHDAY"));
			
			userList.add(user);
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return userList;
	}
	
	// 모든 게시글 가져오기
	public ArrayList<BoardVO> getAllBoard() throws SQLException {
		final String sql = "";
		
		
		
		return null;
	}
	
	// 모든 구매정보 가져오기
	public ArrayList<BuyVO> getAllbuy() throws SQLException{
		final String sql = " select m.BUY_DATE, m.BUY_COMPLETED, m.BUY_COUNT, m.BUY_ITEM_NAME , m.BUY_NO , m.BUY_ORDER_NO , m.BUY_USER_NAME from MALL_BUY m order by m.BUY_NO ";
		
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);		
		
		ArrayList<BuyVO> buyList = new ArrayList<>();
		
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			BuyVO buy = new BuyVO();
			buy.setBuyNo(rs.getInt("BUY_NO"));
			buy.setBuyItemName(rs.getString("BUY_ITEM_NAME"));
			buy.setBuyUserName(rs.getString("BUY_USER_NAME"));
			buy.setBuyCoutn(rs.getInt("BUY_COUNT"));
			buy.setBuyCompleted(rs.getString("BUY_COMPLETED"));
			buy.setBuyOrderNo(rs.getInt("BUY_ORDER_NO"));
			buy.setBuyDate(rs.getDate("BUY_DATE"));
			
			buyList.add(buy);
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return buyList;
	}
	
	// 해당하는 상품 삭제하기
	public void productDelete(int no) throws SQLException{
		final String sql = "delete from MALL_ITEM m WHERE m.ITEM_NO = ?";
		
		Connection con = ConnectionUtil.getConnection();
		
		PreparedStatement pstmt = con.prepareStatement(sql);
		
		pstmt.setInt(1, no);
		pstmt.executeQuery();
		
		pstmt.close();
		con.close();
	}
	
	public void userDelete(int no) throws SQLException{
		final String sql = " delete from MALL_USER u WHERE u.USER_NO = ? ";
		
		Connection con = ConnectionUtil.getConnection();
		
		PreparedStatement pstmt = con.prepareStatement(sql);
		
		pstmt.setInt(1, no);
		pstmt.executeQuery();
		
		pstmt.close();
		con.close();
		
	}
	
	// 상품번호로 이름 가져오기
	public String getItemName(int no) throws SQLException {
		final String sql = " select i.ITEM_NAME from MALL_BUY b, MALL_ITEM i where b.BUY_ITEM_NO = i.ITEM_NO AND b.BUY_ITEM_NO = ? ";
		
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);	
		
		pstmt.setInt(1, no);
		
		String productName = "";
		
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			productName = rs.getString("ITEM_NAME");
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return productName;
	}
	
	// 유저 번호로 이름 가져오기
	public String getUserName(int no) throws SQLException {
		final String sql = " select u.USER_NAME from MALL_BUY b, MALL_USER u where b.BUY_USER_NO = u.USER_NO AND b.BUY_USER_NO = ? ";
		
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);	
		
		pstmt.setInt(1, no);
		
		String userName = "";
		
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			userName = rs.getString("USER_NAME");
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return userName;

	}
	
}
